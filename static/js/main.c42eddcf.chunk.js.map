{"version":3,"sources":["components/FileTable/styles.ts","components/FileTable/TableBody.tsx","components/FileTable/TableHead.tsx","components/FileTable/TableTotals.tsx","components/FileTable/index.tsx","assets/images/emptyFolder.png","components/NoDirectoryProvidedPlaceholder/styles.ts","components/NoDirectoryProvidedPlaceholder/index.tsx","components/SourceDirectoryInput/styles.ts","components/SourceDirectoryInput/index.tsx","components/styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FileItemRow","styled","tr","props","isDirectory","css","TableContainer","table","TableContainerWrapper","div","TableBodyContainer","tbody","TableBodyData","td","MobileItemTitleData","TableHeadContainer","thead","TableHeaderRow","TableHeaderData","BoldSpan","span","fontWeight","FileDetailText","p","TotalDetailsContainer","TotalDetailText","TableBody","sortedFileList","fileList","sort","a","b","size","map","file","type","name","webkitRelativePath","data-testid","moment","lastModifiedDate","format","TableHead","tableHeaderNames","TableTotals","totalFileSize","reduce","currSize","nextSize","totalFileCount","filter","length","detailItems","titleText","valueText","toString","item","idx","FileTable","NothingChosenContainer","NothingChosenText","EmptyFolderImage","img","NoDirectoryProvidedPlacholder","alt","src","emptyFolder","InputContainer","StyledLabel","label","HiddenInputWrapper","SourceDirectoryInput","setFiles","files","htmlFor","id","onChange","event","e","target","uploadedFiles","selectFolder","directory","webkitdirectory","mozdirectory","msdirectory","odirectory","multiple","MainContent","main","TitleH1","h1","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c42eddcf.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const FileItemRow = styled.tr<{ isDirectory: boolean }>`\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  margin: 10px 0;\n  padding: 10px;\n  box-shadow: 0px 1px 7px rgba(0, 0, 0, 0.2);\n  align-items: center;\n\n  ${(props) =>\n    props.isDirectory &&\n    css`\n      border: dotted 2px #000;\n    `};\n\n  &:hover {\n    background-color: #f0f0f0;\n  }\n\n  @media screen and (min-width: 768px) {\n    display: table-row;\n    box-shadow: 0px 1px 7px rgba(0, 0, 0, 0.2);\n  }\n\n  td {\n    min-width: 300px;\n\n    @media screen and (min-width: 768px) {\n      min-width: unset;\n\n      span {\n        display: none;\n      }\n    }\n  }\n`;\n\nexport const TableContainer = styled.table`\n  width: 100%;\n  margin: 0 auto;\n\n  @media screen and (min-width: 768px) {\n    border-collapse: separate;\n    border-spacing: 0 0.5rem;\n\n    && {\n      td {\n        padding-left: 10px;\n        padding-right: 10px;\n      }\n    }\n  }\n`;\n\nexport const TableContainerWrapper = styled.div`\n  max-height: 70vh;\n  overflow-y: hidden;\n  overflow-y: scroll;\n  padding: 0 10px;\n`;\n\nexport const TableBodyContainer = styled.tbody``;\n\nexport const TableBodyData = styled.td`\n  font-size: 1.3rem;\n\n  @media screen and (min-width: 768px) {\n    font-size: 1.6rem;\n    padding: 10px 0;\n\n    label {\n      display: none;\n    }\n  }\n`;\n\nexport const MobileItemTitleData = styled(TableBodyData)`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const TableHeadContainer = styled.thead`\n  display: none;\n\n  @media screen and (min-width: 768px) {\n    display: table-header-group;\n  }\n`;\n\nexport const TableHeaderRow = styled.tr`\n  background-color: #8fd65b;\n\n  td {\n    padding: 20px 0;\n  }\n`;\n\nexport const TableHeaderData = styled.td`\n  font-size: 1.6rem;\n  font-weight: 700;\n  white-space: nowrap;\n`;\n\nexport const BoldSpan = styled.span<{ fontWeight?: number }>`\n  font-weight: ${(props) => props.fontWeight || 500};\n  font-size: 1.4rem;\n`;\n\nexport const FileDetailText = styled.p`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: calc(100vw - 26px);\n  white-space: nowrap;\n`;\n\nexport const TotalDetailsContainer = styled.div`\n  padding: 25px;\n  max-width: 500px;\n  margin: 20px auto 0;\n  border-top: solid 2px #000;\n`;\n\nexport const TotalDetailText = styled.p`\n  font-size: 1.3rem;\n  display: flex;\n  justify-content: space-between;\n  font-weight: 300;\n`;\n","/**\n * @description Uses the fileList prop and sorts the files by size in ascending order prior to rendering.\n */\nimport moment from \"moment\";\nimport { File, FileList } from \"../../types/File\";\nimport {\n  TableBodyContainer,\n  TableBodyData,\n  FileItemRow,\n  MobileItemTitleData,\n  BoldSpan,\n  FileDetailText,\n} from \"./styles\";\n\ninterface Props {\n  fileList: FileList;\n}\n\nconst TableBody = ({ fileList }: Props) => {\n  const sortedFileList = fileList.sort((a, b) => a.size - b.size);\n  const dateFormat = \"ddd MMM, YYYY - hh:mm A\";\n\n  return (\n    <TableBodyContainer>\n      {sortedFileList.map((file: File) => (\n        <FileItemRow key={file.webkitRelativePath} isDirectory={!file.type}>\n          {/** Mobile component hidden on screen size 768px and up */}\n          <MobileItemTitleData>\n            <FileDetailText>\n              <BoldSpan fontWeight={700}>Details for:</BoldSpan>{\" \"}\n              {!file.type ? file.webkitRelativePath : file.name}\n            </FileDetailText>{\" \"}\n          </MobileItemTitleData>\n\n          <TableBodyData data-testid=\"fileName\">\n            <BoldSpan>{!file.type ? \"Directory Path\" : \"File Name\"}:</BoldSpan>{\" \"}\n            {!file.type ? \"*\" + file.webkitRelativePath : file.name}\n          </TableBodyData>\n          <TableBodyData>\n            <BoldSpan>File Size:</BoldSpan> {file.size}\n          </TableBodyData>\n          <TableBodyData>\n            <BoldSpan>Last Modified Date:</BoldSpan>{\" \"}\n            {moment(file.lastModifiedDate).format(dateFormat)}\n          </TableBodyData>\n        </FileItemRow>\n      ))}\n    </TableBodyContainer>\n  );\n};\n\nexport default TableBody;\n","import { TableHeadContainer, TableHeaderRow, TableHeaderData } from \"./styles\";\n\ninterface Props {\n  tableHeaderNames: string[];\n}\n\nconst TableHead = ({ tableHeaderNames }: Props) => {\n  return (\n    <TableHeadContainer>\n      <TableHeaderRow>\n        {tableHeaderNames.map((name) => (\n          <TableHeaderData key={name}>{name}</TableHeaderData>\n        ))}\n      </TableHeaderRow>\n    </TableHeadContainer>\n  );\n};\n\nexport default TableHead;\n","/**\n * @description Performs calculations on fileList prop to provide file stat totals.\n */\nimport { File, FileList } from \"../../types/File\";\nimport { BoldSpan, TotalDetailsContainer, TotalDetailText } from \"./styles\";\n\ninterface Props {\n  fileList: FileList;\n}\n\nconst TableTotals = ({ fileList }: Props) => {\n  // fileSizes includes .DS_Store sizes which are automatically generated for directories\n  const fileSizes = fileList.map((file: File) => file.size);\n  const totalFileSize = fileSizes.reduce(\n    (currSize, nextSize) => currSize + nextSize\n  );\n\n  // Totals represent all nested files and directories within the selected source directory provided by the user\n  const totalFileCount = fileList.filter((file) => file.type).length;\n  const totalDirectoryCount = fileList.length - totalFileCount;\n\n  const detailItems = [\n    {\n      titleText: \"Total # of Sub-directories:\",\n      valueText: totalDirectoryCount.toString(),\n    },\n    {\n      titleText: \"Total # of Files:\",\n      valueText: totalFileCount.toString(),\n    },\n    {\n      titleText: \"Total File Size:\",\n      valueText: `${totalFileSize.toString()} bytes`,\n    },\n  ];\n\n  return (\n    <TotalDetailsContainer>\n      {detailItems.map((item, idx) => (\n        <TotalDetailText key={idx}>\n          <BoldSpan fontWeight={600}>{item.titleText}</BoldSpan>{\" \"}\n          {item.valueText}\n        </TotalDetailText>\n      ))}\n    </TotalDetailsContainer>\n  );\n};\n\nexport default TableTotals;\n","/**\n * @description Renders a table element that displays a breakdown of file stats including:\n * 1. File Name\n * 2. File Size\n * 3. Last Modified Date\n * 4. Total counts for files and sub-directories\n * 5. Total file size including hidden files such as .DS_Store\n */\nimport { FileList } from \"../../types/File\";\nimport { TableContainer, TableContainerWrapper } from \"./styles\";\nimport TableBody from \"./TableBody\";\nimport TableHead from \"./TableHead\";\nimport TableTotals from \"./TableTotals\";\n\ninterface Props {\n  fileList: FileList;\n  tableHeaderNames: string[];\n}\n\nconst FileTable = ({ fileList, tableHeaderNames }: Props) => {\n  return (\n    <>\n      <TableContainerWrapper>\n        <TableContainer>\n          <TableHead tableHeaderNames={tableHeaderNames} />\n          <TableBody fileList={fileList} />\n        </TableContainer>\n      </TableContainerWrapper>\n      <TableTotals fileList={fileList} />\n    </>\n  );\n};\n\nexport default FileTable;\n","export default __webpack_public_path__ + \"static/media/emptyFolder.0d9851c0.png\";","import styled from \"styled-components\";\n\nexport const NothingChosenContainer = styled.div`\n  margin-top: 25px;\n`;\n\nexport const NothingChosenText = styled.p`\n  font-size: 1.4rem;\n  font-style: italic;\n  text-align: center;\n  font-weight: 500;\n`;\n\nexport const EmptyFolderImage = styled.img`\n  width: 350px;\n  height: 350px;\n  margin: 0 auto;\n  object-fit: contain;\n  display: block;\n`;\n","import { emptyFolder } from \"../../assets/images\";\nimport {\n  EmptyFolderImage,\n  NothingChosenContainer,\n  NothingChosenText,\n} from \"./styles\";\n\nconst NoDirectoryProvidedPlacholder = () => {\n  return (\n    <NothingChosenContainer>\n      <NothingChosenText data-testid=\"emptyFiles\">\n        You haven't chosen a source folder yet!\n      </NothingChosenText>\n      <EmptyFolderImage alt=\"Empty Folder\" src={emptyFolder} />\n    </NothingChosenContainer>\n  );\n};\n\nexport default NoDirectoryProvidedPlacholder;\n","import styled from \"styled-components\";\n\nexport const InputContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 50px;\n  margin-bottom: 20px;\n`;\n\nexport const StyledLabel = styled.label`\n  all: unset;\n  display: inline-block;\n  padding: 10px 20px;\n  font-size: 1.1rem;\n  font-weight: 700;\n  letter-spacing: 0.15rem;\n  text-transform: uppercase;\n  background-color: #8fd65b;\n  cursor: pointer;\n  min-width: 150px;\n  text-align: center;\n  border: solid 3px transparent;\n\n  &:hover {\n    border-color: #8fd65b;\n    background-color: #fff;\n  }\n`;\n\nexport const HiddenInputWrapper = styled.div`\n  // Hide input contents while maintaining accessibility standards\n  input {\n    width: 1px;\n    height: 1px;\n    transform: translateX(-1px);\n  }\n`;\n","/**\n * @description Allows the user to select a source directory and updates the files state with all content inside (files and directories).\n */\nimport { ChangeEvent } from \"react\";\nimport { File, FileList } from \"../../types/File\";\nimport {\n  StyledLabel,\n  HiddenInputWrapper,\n  InputContainer,\n} from \"../SourceDirectoryInput/styles\";\n\ninterface Props {\n  setFiles: (fileList: File[]) => void;\n  files: FileList;\n}\n\nconst SourceDirectoryInput = ({ setFiles, files }: Props) => {\n  function selectFolder(e: ChangeEvent<HTMLInputElement>) {\n    if (e.target.files) {\n      const uploadedFiles = e.target.files;\n\n      // Since this app is small and the File type import in App.tsx is coming from a different relative file path, an error is expected.\n      // @ts-expect-error\n      setFiles([...uploadedFiles]);\n    }\n  }\n\n  return (\n    <InputContainer>\n      <StyledLabel htmlFor=\"fileUpload\">\n        {files.length === 0 ? \"Choose\" : \"Change\"} SRC Directory\n      </StyledLabel>\n      <HiddenInputWrapper>\n        <input\n          id=\"fileUpload\"\n          type=\"file\"\n          onChange={(event) => selectFolder(event)}\n          // @ts-expect-error\n          directory=\"true\"\n          webkitdirectory=\"true\"\n          mozdirectory=\"true\"\n          msdirectory=\"true\"\n          odirectory=\"true\"\n          multiple\n        />\n      </HiddenInputWrapper>\n    </InputContainer>\n  );\n};\n\nexport default SourceDirectoryInput;\n","import styled from \"styled-components\";\n\nexport const MainContent = styled.main`\n  max-width: 1440px;\n  margin: 0 auto;\n`;\n\nexport const TitleH1 = styled.h1`\n  font-size: 2.4rem;\n  text-transform: uppercase;\n  letter-spacing: 0.1rem;\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    font-size: 3.2rem;\n  }\n`;\n","import { useState } from \"react\";\nimport FileTable from \"./components/FileTable\";\nimport NoDirectoryProvidedPlacholder from \"./components/NoDirectoryProvidedPlaceholder\";\nimport SourceDirectoryInput from \"./components/SourceDirectoryInput\";\nimport { MainContent, TitleH1 } from \"./components/styles\";\nimport { FileList } from \"./types/File\";\n\nconst App = () => {\n  const [files, setFiles] = useState<FileList>([]);\n  const tableHeaderNames = [\n    \"File Name/*Directory Path\",\n    \"File Size (bytes)\",\n    \"Last Modified Date\",\n  ];\n\n  return (\n    <MainContent>\n      <TitleH1>Directory Visualizer</TitleH1>\n      <SourceDirectoryInput setFiles={setFiles} files={files} />\n      {files.length > 0 ? (\n        <FileTable fileList={files} tableHeaderNames={tableHeaderNames} />\n      ) : (\n        <NoDirectoryProvidedPlacholder />\n      )}\n    </MainContent>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}